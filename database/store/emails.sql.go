// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: emails.sql

package store

import (
	"context"
)

const isMessageProcessed = `-- name: IsMessageProcessed :one
SELECT EXISTS (SELECT 1 FROM processed_emails WHERE message_id = $1)
`

func (q *Queries) IsMessageProcessed(ctx context.Context, messageID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isMessageProcessed, messageID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const markMessageAsProcessed = `-- name: MarkMessageAsProcessed :exec
INSERT INTO processed_emails (message_id) VALUES ($1)
ON CONFLICT (message_id) DO UPDATE SET message_id = message_id
RETURNING message_id
`

func (q *Queries) MarkMessageAsProcessed(ctx context.Context, messageID string) error {
	_, err := q.db.ExecContext(ctx, markMessageAsProcessed, messageID)
	return err
}
