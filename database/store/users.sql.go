// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"
	"database/sql"
	"time"

	uuid "github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (display_name, name, google_id, email)
VALUES ($1, $2, $3, $4)
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

type CreateUserParams struct {
	DisplayName string
	Name        string
	GoogleID    sql.NullString
	Email       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.DisplayName,
		arg.Name,
		arg.GoogleID,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const createUserWithMicrosoftID = `-- name: CreateUserWithMicrosoftID :one
INSERT INTO users (display_name, name, email, microsoft_id)
VALUES ($1, $2, $3, $4)
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

type CreateUserWithMicrosoftIDParams struct {
	DisplayName string
	Name        string
	Email       string
	MicrosoftID sql.NullString
}

func (q *Queries) CreateUserWithMicrosoftID(ctx context.Context, arg CreateUserWithMicrosoftIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUserWithMicrosoftID,
		arg.DisplayName,
		arg.Name,
		arg.Email,
		arg.MicrosoftID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAccessTokenByUserId = `-- name: GetAccessTokenByUserId :one
SELECT accessToken FROM users WHERE id = $1
`

func (q *Queries) GetAccessTokenByUserId(ctx context.Context, id uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getAccessTokenByUserId, id)
	var accesstoken sql.NullString
	err := row.Scan(&accesstoken)
	return accesstoken, err
}

const getAllUsers = `-- name: GetAllUsers :many
Select id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id from Users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.DisplayName,
			&i.GoogleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApiKey,
			&i.ApiKeyDev,
			&i.Refreshtoken,
			&i.Accesstoken,
			&i.Expiry,
			&i.Tokentype,
			&i.Persona,
			&i.MicrosoftID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMicrosoftIDByUser = `-- name: GetMicrosoftIDByUser :one
SELECT microsoft_id FROM users WHERE id = $1
`

func (q *Queries) GetMicrosoftIDByUser(ctx context.Context, id uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getMicrosoftIDByUser, id)
	var microsoft_id sql.NullString
	err := row.Scan(&microsoft_id)
	return microsoft_id, err
}

const getPersona = `-- name: GetPersona :one
SELECT persona FROM users WHERE id = $1
`

func (q *Queries) GetPersona(ctx context.Context, id uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getPersona, id)
	var persona sql.NullString
	err := row.Scan(&persona)
	return persona, err
}

const getRefreshTokenByUserId = `-- name: GetRefreshTokenByUserId :one
SELECT refreshToken FROM users WHERE id = $1
`

func (q *Queries) GetRefreshTokenByUserId(ctx context.Context, id uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserId, id)
	var refreshtoken sql.NullString
	err := row.Scan(&refreshtoken)
	return refreshtoken, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, data, expires FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Expires,
	)
	return i, err
}

const getTokenByUser = `-- name: GetTokenByUser :one
SELECT accesstoken, refreshtoken, expiry, tokentype FROM users WHERE id = $1
`

type GetTokenByUserRow struct {
	Accesstoken  sql.NullString
	Refreshtoken sql.NullString
	Expiry       sql.NullTime
	Tokentype    sql.NullString
}

func (q *Queries) GetTokenByUser(ctx context.Context, id uuid.UUID) (GetTokenByUserRow, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUser, id)
	var i GetTokenByUserRow
	err := row.Scan(
		&i.Accesstoken,
		&i.Refreshtoken,
		&i.Expiry,
		&i.Tokentype,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const getUserByMicrosoftID = `-- name: GetUserByMicrosoftID :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users WHERE microsoft_id = $1
`

func (q *Queries) GetUserByMicrosoftID(ctx context.Context, microsoftID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByMicrosoftID, microsoftID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const insertAccessTokenByUserId = `-- name: InsertAccessTokenByUserId :exec
UPDATE users SET accessToken = $1 WHERE id = $2
`

type InsertAccessTokenByUserIdParams struct {
	Accesstoken sql.NullString
	ID          uuid.UUID
}

func (q *Queries) InsertAccessTokenByUserId(ctx context.Context, arg InsertAccessTokenByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, insertAccessTokenByUserId, arg.Accesstoken, arg.ID)
	return err
}

const insertIntoSessions = `-- name: InsertIntoSessions :one
INSERT INTO sessions (id, user_id, data, expires)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, data, expires
`

type InsertIntoSessionsParams struct {
	ID      string
	UserID  string
	Data    pqtype.NullRawMessage
	Expires time.Time
}

func (q *Queries) InsertIntoSessions(ctx context.Context, arg InsertIntoSessionsParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, insertIntoSessions,
		arg.ID,
		arg.UserID,
		arg.Data,
		arg.Expires,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Expires,
	)
	return i, err
}

const insertRefreshTokenByUserId = `-- name: InsertRefreshTokenByUserId :exec
UPDATE users SET refreshToken = $1 WHERE id = $2
`

type InsertRefreshTokenByUserIdParams struct {
	Refreshtoken sql.NullString
	ID           uuid.UUID
}

func (q *Queries) InsertRefreshTokenByUserId(ctx context.Context, arg InsertRefreshTokenByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshTokenByUserId, arg.Refreshtoken, arg.ID)
	return err
}

const insertTokenByUserID = `-- name: InsertTokenByUserID :one
UPDATE users SET accessToken = $1, refreshToken = $2, expiry = $3, tokenType = $4 WHERE id = $5
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

type InsertTokenByUserIDParams struct {
	Accesstoken  sql.NullString
	Refreshtoken sql.NullString
	Expiry       sql.NullTime
	Tokentype    sql.NullString
	ID           uuid.UUID
}

func (q *Queries) InsertTokenByUserID(ctx context.Context, arg InsertTokenByUserIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertTokenByUserID,
		arg.Accesstoken,
		arg.Refreshtoken,
		arg.Expiry,
		arg.Tokentype,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const removeTokens = `-- name: RemoveTokens :one
UPDATE users SET accessToken = NULL, refreshToken = NULL, expiry = NULL, tokenType = NULL WHERE id = $1
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

func (q *Queries) RemoveTokens(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, removeTokens, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const setPersona = `-- name: SetPersona :one
UPDATE users SET persona = $1 WHERE id = $2
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

type SetPersonaParams struct {
	Persona sql.NullString
	ID      uuid.UUID
}

func (q *Queries) SetPersona(ctx context.Context, arg SetPersonaParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setPersona, arg.Persona, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const updateExpiryByUserId = `-- name: UpdateExpiryByUserId :one
UPDATE users SET expiry = $1 WHERE id = $2
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

type UpdateExpiryByUserIdParams struct {
	Expiry sql.NullTime
	ID     uuid.UUID
}

func (q *Queries) UpdateExpiryByUserId(ctx context.Context, arg UpdateExpiryByUserIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateExpiryByUserId, arg.Expiry, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}

const updateTokenTypeByUserId = `-- name: UpdateTokenTypeByUserId :one
UPDATE users SET tokenType = $1 WHERE id = $2
RETURNING id, email, name, display_name, google_id, created_at, updated_at, api_key, api_key_dev, refreshtoken, accesstoken, expiry, tokentype, persona, microsoft_id
`

type UpdateTokenTypeByUserIdParams struct {
	Tokentype sql.NullString
	ID        uuid.UUID
}

func (q *Queries) UpdateTokenTypeByUserId(ctx context.Context, arg UpdateTokenTypeByUserIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateTokenTypeByUserId, arg.Tokentype, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.DisplayName,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.ApiKeyDev,
		&i.Refreshtoken,
		&i.Accesstoken,
		&i.Expiry,
		&i.Tokentype,
		&i.Persona,
		&i.MicrosoftID,
	)
	return i, err
}
